paste0(c(dataHeader,names(model.vif),model.vif),collapse=",")
paste0(c(dataHeader,length(model.vif[model.vif>5]),names(model.vif),model.vif),collapse=",")
vc
plot(vc)
vc$sim>0.7
vc$sim[vc$sim>0.7]
89:89
### Detect collinearity in defect dataset
## Set working directory
script.dir <- dirname(sys.frame(1)$ofile)
setwd(script.dir)
## Import packages
# These two lines are used to download DefectData library
#library(devtools)
#install_github("klainfo/DefectData")
library(DefectData)
## Define functions
writeLine <- function(arg1,arg2){
write(paste0(arg2,collapse=","),file=arg1,append=TRUE)
}
corrGraph <- function(dataset,refOrder,dataHeader){
vc <- varclus(~.,
data=dataset[refOrder],
similarity = "spearman",
trans="abs")
png(height=1080, width=1080, pointsize=15, file=paste0("./output/varclus/",dataHeader,"_varclus.png"))
plot(vc)
abline(h=0.3) # threashold 0.7 on graph
dev.off()
}
getVIF <- function(dataset,refOrder,depVar,dataHeader){
model <- glm(as.formula(paste(
depVar, "~", paste(refOrder, collapse = '+')
)),
data = dataset,
family = binomial())
model.vif <- vif(model)[refOrder]
# Header
# Number of highly correlated variables (VIF > 5)
# Indep Var
# VIF
writeLine("./output/VIF.csv",paste0(c(dataHeader,length(model.vif[model.vif>5]),names(model.vif),model.vif),collapse=","))
}
## Main
# Create output folder
dir.create(file.path(paste0(getwd(), '/output/')), showWarnings = FALSE)
dir.create(file.path(paste0(getwd(), '/output/varclus/')), showWarnings = FALSE)
for(targetProjectId in 89:89) {
print(paste('Start ProjectID:', targetProjectId))
targetData <- as.character(listData[targetProjectId, 1])
## Load data
Data <- loadData(targetData)
# retrieve data, name of dependent and independent variables
dataset <- Data$data
dep <- Data$dep
indep <- Data$indep
# convert fron logical -> factor variable type
dataset <- dataset[c(indep, dep)]
dataset[dep] <-
lapply(dataset[dep], function(x)
factor(ifelse(x, "true", "false")))
corrGraph(dataset,indep,targetData)
getVIF(dataset,indep,dep,targetData)
}
source('~/Dropbox/Source/R/collinearity-defectdata/collinearityDefectData.R')
source('~/Dropbox/Source/R/collinearity-defectdata/collinearityDefectData.R')
Views(vc)
View(vc)
vc$hclust$height
listData
listData
nrow(listData)
source('~/Dropbox/Source/R/collinearity-defectdata/collinearityDefectData.R')
?tryCatch
print(paste0("Fail to export VIF on ",targetData))
source('~/Dropbox/Source/R/collinearity-defectdata/collinearityDefectData.R')
failVarclus = c()
failVarclus.add(1)
a = list()
a.add(1)
a.append(1)
tryCatch(
{
corrGraph(dataset,indep,targetData)
},
error = (failVarclus=c(failVarclus,targetDataId)),targetData)))
### Detect collinearity in defect dataset
## Set working directory
script.dir <- dirname(sys.frame(1)$ofile)
setwd(script.dir)
## Import packages
# These two lines are used to download DefectData library
#library(devtools)
#install_github("klainfo/DefectData")
library(DefectData)
## Define functions
writeLine <- function(arg1,arg2){
write(paste0(arg2,collapse=","),file=arg1,append=TRUE)
}
corrGraph <- function(dataset,refOrder,dataHeader){
vc <- varclus(~.,
data=dataset[refOrder],
similarity = "spearman",
trans="abs")
png(height=1080, width=1080, pointsize=15, file=paste0("./output/varclus/",dataHeader,"_varclus.png"))
plot(vc)
abline(h=0.3) # threashold 0.7 on graph
dev.off()
}
getVIF <- function(dataset,refOrder,depVar,dataHeader){
model <- glm(as.formula(paste(
depVar, "~", paste(refOrder, collapse = '+')
)),
data = dataset,
family = binomial())
model.vif <- vif(model)[refOrder]
# Header, n(HighlyCorrelatedVar) Text,Indep
# Header, n(HighlyCorrelatedVar),VIF
writeLine("./output/VIF.csv",paste0(c(dataHeader,"n(highCol)",names(model.vif)),collapse=","))
writeLine("./output/VIF.csv",paste0(c(dataHeader,length(model.vif[model.vif>5]),model.vif),collapse=","))
}
## Main
# Create output folder
dir.create(file.path(paste0(getwd(), '/output/')), showWarnings = FALSE)
dir.create(file.path(paste0(getwd(), '/output/varclus/')), showWarnings = FALSE)
failVarclus = c()
failVIF = c()
for(targetProjectId in 1:nrow(listData)) {
print(paste('Start ProjectID:', targetProjectId))
targetData <- as.character(listData[targetProjectId, 1])
## Load data
Data <- loadData(targetData)
# retrieve data, name of dependent and independent variables
dataset <- Data$data
dep <- Data$dep
indep <- Data$indep
# convert fron logical -> factor variable type
dataset <- dataset[c(indep, dep)]
dataset[dep] <-
lapply(dataset[dep], function(x)
factor(ifelse(x, "true", "false")))
tryCatch(
{
corrGraph(dataset,indep,targetData)
},
error = function(){
print(paste0("Fail to export correlation graph(varclus) on ",targetData))
failVarclus <- c(failVarclus,targetProjectId)
})
tryCatch(
{
getVIF(dataset,indep,dep,targetData)
},
error = function(){
print(paste0("Fail to export VIF on ",targetData))
failVIF <- c(failVIF,targetProjectId)
})
}
print("Fail to varclus projectID")
print(failVarclus)
print("Fail to VIF projectID")
print(failVIF)
### Detect collinearity in defect dataset
## Set working directory
script.dir <- dirname(sys.frame(1)$ofile)
setwd(script.dir)
## Import packages
# These two lines are used to download DefectData library
#library(devtools)
#install_github("klainfo/DefectData")
library(DefectData)
## Define functions
writeLine <- function(arg1,arg2){
write(paste0(arg2,collapse=","),file=arg1,append=TRUE)
}
corrGraph <- function(dataset,refOrder,dataHeader){
vc <- varclus(~.,
data=dataset[refOrder],
similarity = "spearman",
trans="abs")
png(height=1080, width=1080, pointsize=15, file=paste0("./output/varclus/",dataHeader,"_varclus.png"))
plot(vc)
abline(h=0.3) # threashold 0.7 on graph
dev.off()
}
getVIF <- function(dataset,refOrder,depVar,dataHeader){
model <- glm(as.formula(paste(
depVar, "~", paste(refOrder, collapse = '+')
)),
data = dataset,
family = binomial())
model.vif <- vif(model)[refOrder]
# Header, n(HighlyCorrelatedVar) Text,Indep
# Header, n(HighlyCorrelatedVar),VIF
writeLine("./output/VIF.csv",paste0(c(dataHeader,"n(highCol)",names(model.vif)),collapse=","))
writeLine("./output/VIF.csv",paste0(c(dataHeader,length(model.vif[model.vif>5]),model.vif),collapse=","))
}
## Main
# Create output folder
dir.create(file.path(paste0(getwd(), '/output/')), showWarnings = FALSE)
dir.create(file.path(paste0(getwd(), '/output/varclus/')), showWarnings = FALSE)
failVarclus = c()
failVIF = c()
for(targetProjectId in 1:nrow(listData)) {
print(paste('Start ProjectID:', targetProjectId))
targetData <- as.character(listData[targetProjectId, 1])
## Load data
Data <- loadData(targetData)
# retrieve data, name of dependent and independent variables
dataset <- Data$data
dep <- Data$dep
indep <- Data$indep
# convert fron logical -> factor variable type
dataset <- dataset[c(indep, dep)]
dataset[dep] <-
lapply(dataset[dep], function(x)
factor(ifelse(x, "true", "false")))
tryCatch(
{
corrGraph(dataset,indep,targetData)
},
error = function(e){
print(paste0("Fail to export correlation graph(varclus) on ",targetData))
failVarclus <- c(failVarclus,targetProjectId)
})
tryCatch(
{
getVIF(dataset,indep,dep,targetData)
},
error = function(e){
print(paste0("Fail to export VIF on ",targetData))
failVIF <- c(failVIF,targetProjectId)
})
}
source('~/Dropbox/Source/R/collinearity-defectdata/collinearityDefectData.R')
### Detect collinearity in defect dataset
## Set working directory
script.dir <- dirname(sys.frame(1)$ofile)
setwd(script.dir)
## Import packages
# These two lines are used to download DefectData library
#library(devtools)
#install_github("klainfo/DefectData")
library(DefectData)
## Define functions
writeLine <- function(arg1,arg2){
write(paste0(arg2,collapse=","),file=arg1,append=TRUE)
}
corrGraph <- function(dataset,refOrder,dataHeader){
vc <- varclus(~.,
data=dataset[refOrder],
similarity = "spearman",
trans="abs")
png(height=1080, width=1080, pointsize=15, file=paste0("./output/varclus/",dataHeader,"_varclus.png"))
plot(vc)
abline(h=0.3) # threashold 0.7 on graph
dev.off()
}
getVIF <- function(dataset,refOrder,depVar,dataHeader){
model <- glm(as.formula(paste(
depVar, "~", paste(refOrder, collapse = '+')
)),
data = dataset,
family = binomial())
model.vif <- vif(model)[refOrder]
# Header, n(HighlyCorrelatedVar) Text,Indep
# Header, n(HighlyCorrelatedVar),VIF
writeLine("./output/VIF.csv",paste0(c(dataHeader,"n(highCol)",names(model.vif)),collapse=","))
writeLine("./output/VIF.csv",paste0(c(dataHeader,length(model.vif[model.vif>5]),model.vif),collapse=","))
}
## Main
# Create output folder
dir.create(file.path(paste0(getwd(), '/output/')), showWarnings = FALSE)
dir.create(file.path(paste0(getwd(), '/output/varclus/')), showWarnings = FALSE)
failVarclus = c()
failVIF = c()
for(targetProjectId in 1:nrow(listData)) {
print(paste('Start ProjectID:', targetProjectId))
targetData <- as.character(listData[targetProjectId, 1])
## Load data
Data <- loadData(targetData)
# retrieve data, name of dependent and independent variables
dataset <- Data$data
dep <- Data$dep
indep <- Data$indep
# convert fron logical -> factor variable type
dataset <- dataset[c(indep, dep)]
dataset[dep] <-
lapply(dataset[dep], function(x)
factor(ifelse(x, "true", "false")))
tryCatch(
{
corrGraph(dataset,indep,targetData)
},
error = function(e){
print(paste0("Fail to export correlation graph(varclus) on ",targetData))
failVarclus <- c(failVarclus,targetProjectId)
browser()
})
tryCatch(
{
getVIF(dataset,indep,dep,targetData)
},
error = function(e){
print(paste0("Fail to export VIF on ",targetData))
failVIF <- c(failVIF,targetProjectId)
})
}
print("Fail to varclus projectID")
print(failVarclus)
print("Fail to VIF projectID")
print(failVIF)
failVarclus
targetProjectId
failVarclus
### Detect collinearity in defect dataset
## Set working directory
script.dir <- dirname(sys.frame(1)$ofile)
setwd(script.dir)
## Import packages
# These two lines are used to download DefectData library
#library(devtools)
#install_github("klainfo/DefectData")
library(DefectData)
## Define functions
writeLine <- function(arg1,arg2){
write(paste0(arg2,collapse=","),file=arg1,append=TRUE)
}
corrGraph <- function(dataset,refOrder,dataHeader){
vc <- varclus(~.,
data=dataset[refOrder],
similarity = "spearman",
trans="abs")
png(height=1080, width=1080, pointsize=15, file=paste0("./output/varclus/",dataHeader,"_varclus.png"))
plot(vc)
abline(h=0.3) # threashold 0.7 on graph
dev.off()
}
getVIF <- function(dataset,refOrder,depVar,dataHeader){
model <- glm(as.formula(paste(
depVar, "~", paste(refOrder, collapse = '+')
)),
data = dataset,
family = binomial())
model.vif <- vif(model)[refOrder]
# Header, n(HighlyCorrelatedVar) Text,Indep
# Header, n(HighlyCorrelatedVar),VIF
writeLine("./output/VIF.csv",paste0(c(dataHeader,"n(highCol)",names(model.vif)),collapse=","))
writeLine("./output/VIF.csv",paste0(c(dataHeader,length(model.vif[model.vif>5]),model.vif),collapse=","))
}
## Main
# Create output folder
dir.create(file.path(paste0(getwd(), '/output/')), showWarnings = FALSE)
dir.create(file.path(paste0(getwd(), '/output/varclus/')), showWarnings = FALSE)
failVarclus <<- c()
failVIF <<- c()
for(targetProjectId in 1:nrow(listData)) {
print(paste('Start ProjectID:', targetProjectId))
targetData <- as.character(listData[targetProjectId, 1])
## Load data
Data <- loadData(targetData)
# retrieve data, name of dependent and independent variables
dataset <- Data$data
dep <- Data$dep
indep <- Data$indep
# convert fron logical -> factor variable type
dataset <- dataset[c(indep, dep)]
dataset[dep] <-
lapply(dataset[dep], function(x)
factor(ifelse(x, "true", "false")))
tryCatch(
{
corrGraph(dataset,indep,targetData)
},
error = function(e){
print(paste0("Fail to export correlation graph(varclus) on ",targetData))
failVarclus <- c(failVarclus,targetProjectId)
browser()
})
tryCatch(
{
getVIF(dataset,indep,dep,targetData)
},
error = function(e){
print(paste0("Fail to export VIF on ",targetData))
failVIF <- c(failVIF,targetProjectId)
browser()
})
}
print("Fail to varclus projectID")
print(failVarclus)
print("Fail to VIF projectID")
print(failVIF)
failVIF
failVIF
failVIF
### Detect collinearity in defect dataset
## Set working directory
script.dir <- dirname(sys.frame(1)$ofile)
setwd(script.dir)
## Import packages
# These two lines are used to download DefectData library
#library(devtools)
#install_github("klainfo/DefectData")
library(DefectData)
## Define functions
writeLine <- function(arg1,arg2){
write(paste0(arg2,collapse=","),file=arg1,append=TRUE)
}
corrGraph <- function(dataset,refOrder,dataHeader){
vc <- varclus(~.,
data=dataset[refOrder],
similarity = "spearman",
trans="abs")
png(height=1080, width=1080, pointsize=15, file=paste0("./output/varclus/",dataHeader,"_varclus.png"))
plot(vc)
abline(h=0.3) # threashold 0.7 on graph
dev.off()
}
getVIF <- function(dataset,refOrder,depVar,dataHeader){
model <- glm(as.formula(paste(
depVar, "~", paste(refOrder, collapse = '+')
)),
data = dataset,
family = binomial())
model.vif <- vif(model)[refOrder]
# Header, n(HighlyCorrelatedVar) Text,Indep
# Header, n(HighlyCorrelatedVar),VIF
writeLine("./output/VIF.csv",paste0(c(dataHeader,"n(highCol)",names(model.vif)),collapse=","))
writeLine("./output/VIF.csv",paste0(c(dataHeader,length(model.vif[model.vif>5]),model.vif),collapse=","))
}
## Main
# Create output folder
dir.create(file.path(paste0(getwd(), '/output/')), showWarnings = FALSE)
dir.create(file.path(paste0(getwd(), '/output/varclus/')), showWarnings = FALSE)
failVarclus <- c()
failVIF <- c()
for(targetProjectId in 1:nrow(listData)) {
print(paste('Start ProjectID:', targetProjectId))
targetData <- as.character(listData[targetProjectId, 1])
## Load data
Data <- loadData(targetData)
# retrieve data, name of dependent and independent variables
dataset <- Data$data
dep <- Data$dep
indep <- Data$indep
# convert fron logical -> factor variable type
dataset <- dataset[c(indep, dep)]
dataset[dep] <-
lapply(dataset[dep], function(x)
factor(ifelse(x, "true", "false")))
tryCatch(
{
corrGraph(dataset,indep,targetData)
},
error = function(e){
print(paste0("Fail to export correlation graph(varclus) on ",targetData))
failVarclus <<- c(failVarclus,targetProjectId)
browser()
})
tryCatch(
{
getVIF(dataset,indep,dep,targetData)
},
error = function(e){
print(paste0("Fail to export VIF on ",targetData))
failVIF <<- c(failVIF,targetProjectId)
browser()
})
}
print("Fail to varclus projectID")
print(failVarclus)
print("Fail to VIF projectID")
print(failVIF)
failVIF
failVIF
source('~/Dropbox/Source/R/collinearity-defectdata/collinearityDefectData.R')
getVIF(dataset,indep,dep,targetData)
model
alias(model)
dataset
refOrder = indep
depVar = dep
glm(as.formula(paste(
depVar, "~", paste(refOrder, collapse = '+')
)),
data = dataset,
family = binomial())
alias(glm(as.formula(paste(
depVar, "~", paste(refOrder, collapse = '+')
)),
data = dataset,
family = binomial()))
summary(dataset)
plot(dataset)
plot(dataset)
plot(vc)
vc <- varclus(~.,
data=dataset[refOrder],
similarity = "spearman",
trans="abs")
png(height=1080, width=1080, pointsize=15, file=paste0("./output/varclus/",dataHeader,"_varclus.png"))
plot(vc)
plot(vc)
vc <- varclus(~.,
data=dataset[refOrder],
similarity = "spearman",
trans="abs")
png(height=1080, width=1080, pointsize=15, file=paste0("./output/varclus/",dataHeader,"_varclus.png"))
plot(vc)
abline(h=0.3) # threashold 0.7 on graph
dev.off()
